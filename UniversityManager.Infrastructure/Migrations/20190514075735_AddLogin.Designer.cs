// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityManager.Infrastructure.EF;

namespace UniversityManager.Infrastructure.Migrations
{
    [DbContext(typeof(UniversityManagerContext))]
    [Migration("20190514075735_AddLogin")]
    partial class AddLogin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversityManager.Core.Domain.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LectureId");

                    b.Property<bool>("Present");

                    b.Property<Guid?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.FieldStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FacultyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("FieldStudy");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LecturerId");

                    b.Property<Guid?>("StudentId");

                    b.Property<Guid?>("StudySubjectId");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudySubjectId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LectureRoomId");

                    b.Property<Guid?>("LecturerId");

                    b.Property<Guid?>("StudySubjectId");

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("LectureRoomId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudySubjectId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.LectureRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("LectureRooms");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LoggedAt");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.StudySubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FieldStudyId");

                    b.Property<Guid?>("LecturerId");

                    b.Property<string>("Name");

                    b.Property<int>("Semester");

                    b.HasKey("Id");

                    b.HasIndex("FieldStudyId");

                    b.HasIndex("LecturerId");

                    b.ToTable("StudySubject");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<string>("Salt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Lecturer", b =>
                {
                    b.HasBaseType("UniversityManager.Core.Domain.User");

                    b.Property<Guid?>("HomeFacultyId");

                    b.HasIndex("HomeFacultyId");

                    b.HasDiscriminator().HasValue("Lecturer");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Student", b =>
                {
                    b.HasBaseType("UniversityManager.Core.Domain.User");

                    b.Property<Guid?>("FieldStudyId");

                    b.Property<int>("IndexNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(6);

                    b.Property<int>("Semester");

                    b.HasIndex("FieldStudyId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Attendance", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId");

                    b.HasOne("UniversityManager.Core.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Faculty", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.FieldStudy", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.Faculty", "Faculty")
                        .WithMany("FieldStudies")
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Grade", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("UniversityManager.Core.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("UniversityManager.Core.Domain.StudySubject", "StudySubject")
                        .WithMany()
                        .HasForeignKey("StudySubjectId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Lecture", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.LectureRoom", "LectureRoom")
                        .WithMany()
                        .HasForeignKey("LectureRoomId");

                    b.HasOne("UniversityManager.Core.Domain.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("UniversityManager.Core.Domain.StudySubject", "StudySubject")
                        .WithMany()
                        .HasForeignKey("StudySubjectId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Login", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.StudySubject", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.FieldStudy", "FieldStudy")
                        .WithMany("StudySubjects")
                        .HasForeignKey("FieldStudyId");

                    b.HasOne("UniversityManager.Core.Domain.Lecturer")
                        .WithMany("StudySubjectsTaught")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Lecturer", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.Faculty", "HomeFaculty")
                        .WithMany()
                        .HasForeignKey("HomeFacultyId");
                });

            modelBuilder.Entity("UniversityManager.Core.Domain.Student", b =>
                {
                    b.HasOne("UniversityManager.Core.Domain.FieldStudy", "FieldStudy")
                        .WithMany()
                        .HasForeignKey("FieldStudyId");
                });
#pragma warning restore 612, 618
        }
    }
}
